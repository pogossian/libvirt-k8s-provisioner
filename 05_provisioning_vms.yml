- name: This play provisions k8s VMs based on intial config
  hosts: vm_host
  vars_files:
    - vars/k8s_cluster.yml
    - vars/libvirt.yml
  tasks:
    - name: Download CentOS image
      get_url:
        url: "{{ centos_cloud_image }}"
        dest: /tmp/CentOS-7-x86_64-GenericCloud.qcow2
        mode: 0777

    - name: Create a copy for master nodes
      copy: 
        src: /tmp/CentOS-7-x86_64-GenericCloud.qcow2
        dest: /tmp/CentOS-7-x86_64-GenericCloud-master.qcow2
        remote_src: true

    - name: Create a copy for worker nodes
      copy:
        src: /tmp/CentOS-7-x86_64-GenericCloud.qcow2
        dest: /tmp/CentOS-7-x86_64-GenericCloud-worker.qcow2
        remote_src: true

    - name: Grow cloud partition to avoid disk pressure
      shell: qemu-img resize /tmp/CentOS-7-x86_64-GenericCloud-master.qcow2 {{ k8s.control_plane.disk }}G

    - name: Grow cloud partition to avoid disk pressure
      shell: qemu-img resize /tmp/CentOS-7-x86_64-GenericCloud-worker.qcow2 {{ k8s.worker_nodes.disk }}G

    - name: Create ssh keypair
      openssh_keypair:
        path: "id_rsa"

    - terraform:
        project_path: "files/terraform/masters"
        force_init: true
        variables:
          hostname: "node"
          domain: "{{ libvirt.network.domain }}"
          libvirt_network: "{{ libvirt.network.name }}"
          libvirt_pool: "{{ libvirt.storage.pool_name }}"
          cpu: "{{ k8s.control_plane.vcpu }}"
          memory: "{{ k8s.control_plane.mem }}"
          vm_count: "{{ k8s.control_plane.vms }}"
        state: present
      register: output_masters

    # - terraform:
    #     project_path: "files/terraform/workers"
    #     force_init: true
    #     variables:
    #       hostname: "k8s-worker"
    #       domain: "{{ libvirt.network.domain }}"
    #       libvirt_network: "{{ libvirt.network.name }}"
    #       libvirt_pool: "{{ libvirt.storage.pool_name }}"
    #       cpu: "{{ k8s.worker_nodes.vcpu }}"
    #       memory: "{{ k8s.worker_nodes.mem }}"
    #       vm_count: "{{ k8s.worker_nodes.vms }}"
    #     state: present
    #   register: output_workers
    #   when: not rook_ceph.install_rook

    # - terraform:
    #     project_path: "files/terraform/workers-rook"
    #     force_init: true
    #     variables:
    #       hostname: "k8s-worker"
    #       domain: "{{ libvirt.network.domain }}"
    #       libvirt_network: "{{ libvirt.network.name }}"
    #       libvirt_pool: "{{ libvirt.storage.pool_name }}"
    #       cpu: "{{ k8s.worker_nodes.vcpu }}"
    #       memory: "{{ k8s.worker_nodes.mem }}"
    #       rook_volume_size: "{{ rook_ceph.volume_size }}"
    #       vm_count: "{{ k8s.worker_nodes.vms }}"
    #     state: present
    #   register: output_workers
    #   when: rook_ceph.install_rook

    - name: Add masters to given group
      add_host:
        hostname: 'k8s-master-{{ item }}.{{ libvirt.network.domain }}'
        k8s_installed: false
        node_hostname: 'k8s-master-{{ item }}.{{ libvirt.network.domain }}'
        node_mac: "{{ output_masters.outputs.macs.value[item]|lower }}"
        node_fqdn: k8s-master-{{ item }}.{{ libvirt.network.domain }} 
        ansible_ssh_private_key_file: "id_rsa"
        ansible_user: kube
        ansible_ssh_common_args: '-o StrictHostKeyChecking=no'
        groups:
          - "masters"
        group_children: "k8s_nodes"
      loop: "{{ range(0, k8s.control_plane.vms) | list }}"

    # - name: Add workers to given group
    #   add_host:
    #     hostname: 'k8s-worker-{{ item }}.{{ libvirt.network.domain }}'
    #     node_hostname: 'k8s-worker-{{ item }}.{{ libvirt.network.domain }}'
    #     node_mac: "{{ output_workers.outputs.macs.value[item]|lower }}"
    #     node_fqdn: k8s-worker-{{ item }}.{{ libvirt.network.domain }}
    #     ansible_ssh_private_key_file: "id_rsa"
    #     ansible_user: kube
    #     ansible_ssh_common_args: '-o StrictHostKeyChecking=no'
    #     groups:
    #       - "workers"
    #     group_children: "k8s_nodes"
    #   loop: "{{ range(0, k8s.worker_nodes.vms) | list }}"

    - name: Ensure to clean known_hosts
      known_hosts:
        host: "{{ item }}"
        path: ~/.ssh/known_hosts
        state: absent
      loop: "{{ query('inventory_hostnames', 'all:!vm_host') }}"

# - name: Check connection, rename connection and set facts
#   hosts: masters,workers
#   gather_facts: no
#   tasks:
#     - name: Wait 600 seconds for target connection to become reachable/usable
#       wait_for_connection:
#         timeout: 120
#         delay: 0
#     - ping:

#     - name: add hosts to children groups
#       group_by:
#         key: "{{ group_children }}"

#     - debug:
#         var: groups

#     - setup:
#       register: machine_facts

#     - set_fact:
#         host_ip: "{{ machine_facts.ansible_facts.ansible_default_ipv4.address }}"
#         host_interface: "{{ machine_facts.ansible_facts.ansible_default_ipv4.interface }}"
#         host_mac: "{{ machine_facts.ansible_facts.ansible_default_ipv4.macaddress }}"
#         host_fqdn: "{{ machine_facts.ansible_facts.ansible_fqdn }}" 
